// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// SQL Application main program

// Generated: [[Time]]

package main

import (
    "fmt"
	"net/http"
)

func FavIconHndlr(w http.ResponseWriter, req *http.Request) {
	http.
}

func exec() {

    router.HandleFunc("/favicon.ico", FavIconHndlr).Methods("GET")
	http.HandleFunc("/", mainIndex)
	http.HandleFunc("/favicon.ico", noFile)
	[[- range $t := .Data.Tables -]]
	    http.HandleFunc("/[[$t.Name]]",                   [[$t.Name]].Index)
	    http.HandleFunc("/[[$t.Name]]/show",              [[$t.Name]].Show)
	    http.HandleFunc("/[[$t.Name]]/create",            [[$t.Name]].Create)
	    http.HandleFunc("/[[$t.Name]]/create/process",    [[$t.Name]].CreateProcess)
	    http.HandleFunc("/[[$t.Name]]/update",            [[$t.Name]].Update)
	    http.HandleFunc("/[[$t.Name]]/update/process",    [[$t.Name]].UpdateProcess)
	    http.HandleFunc("/[[$t.Name]]/delete/process",    [[$t.Name]].DeleteProcess)
	[[ end -]]
	srvrStr := fmt.Sprintf("%s:%s", http_srvr, http_port)
	log.Fatal(http.ListenAndServe(srvrStr, nil))

}


func mainIndex(w http.ResponseWriter, r *http.Request) {
	//http.Redirect(w, r, "/$v.Name", http.StatusSeeOther)
}

// Tell Client that we don't have the requested file
func noFile(w http.ResponseWriter, r *http.Request) {
	http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
}