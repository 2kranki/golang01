// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// io[[.TD.Data.TitledName]] contains all the functions
// and data to interact with the SQL Database.

// Generated: [[Time]]

package io[[.TD.Data.TitledName]]

import (
    "database/sql"
	"errors"
    "fmt"
    "log"
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType  "mssql" ]]
	_ "github.com/2kranki/go-mssqldb"
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		_ "github.com/go-sql-driver/mysql"
	[[ else if eq .TD.Data.SqlType "postgres" ]]
		_ "github.com/lib/pq"
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    _ "github.com/2kranki/go-sqlite3"
	[[ end ]]
	//"net/http"
	//"strconv"
)


var db          *sql.DB
var	dbPW       	string
var dbPort     	string
var dbServer    string
var dbUser     	string

func Connect() error {
    var err         error

	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "mssql" ]]
	    connStr := fmt.Sprintf("sqlserver://%s:%s@%s:%s?database=%s&connection+timeout=30",
	                            dbUser,dbPW,dbServer,dbPort,"[[.TD.Data.TitledName]]")
	    db, err := sql.Open("mssql", connStr)
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "postgres" ]]
	    connStr := fmt.Sprintf("user=%s password=%s host=%s port=%s dbname=%s sslmode=disable",
	                            dbUser,dbPW,dbServer,dbPort,"[[.TD.Data.TitledName]]")
        db, err = sql.Open("postgres", connStr)
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    connStr := fmt.Sprintf("%s", dbServer)
	    db, err = sql.Open("sqlite3", connStr)
	[[ end ]]
    if err != nil {
        log.Fatalln("Error: Cannot Connect: ", err)
    }
    err = db.Ping()
    if err != nil {
        log.Fatalln("Error: Cannot Ping: ", err)
    }

    return nil
}

// Disconnect() cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func Disconnect() error {
    var err         error

    if db != nil {
        err = db.Close()
        db = nil
    } else {
        err = errors.New("Error: Database was not connected!")
    }

    return err
}

func TablesCreate() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]Create()
        if err != nil {
            log.Fatalln("Error: Cannot create table: ", err)
        }
	[[ end ]]

	return err
}

func TablesDelete() error {
    var err         error

	[[range $t := .TD.Data.Tables -]]
        err = [[$t.TitledName]]Delete()
        if err != nil {
            log.Fatalln("Error: Cannot delete table: ", err)
        }
	[[ end ]]

	return err
}

func Name() string {
    return "[[.TD.Data.Name]]"
}
func Port() string {
   return dbPort
}

func SetPort(port string) {
   dbPort = port
}

func PW() string {
   return dbPW
}

func SetPW(pw string) {
   dbPW = pw
}

func Server() string {
   return dbServer
}

func SetServer(server string) {
   dbServer = server
}

func User() string {
   return dbServer
}

func SetUser(user string) {
   dbUser = user
}
