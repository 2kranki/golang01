// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

//

package tableio

import (
    "database/sql"
	"errors"
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType  "mssql" ]]
	_ "github.com/2kranki/go-mssqldb"
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		_ "github.com/go-sql-driver/mysql"
	[[ else if eq .TD.Data.SqlType "postgres" ]]
		_ "github.com/lib/pq"
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    _ "github.com/2kranki/go-sqlite3"
	[[ end ]]
	"net/http"
	"strconv"
)


var db *sql.DB

// ioClose cleans up anything that needs to be
// accomplished before the database is closed
// and then closes the database connection.
func ioClose() {
    db.Close()
}

func ioConnect() {
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "mssql" ]]
	    connStr := fmt.Sprintf("sqlserver://%s:%s@%s:%s?database=%s&connection+timeout=30",
	                            user,pw,server,port,db)
	    db, err := sql.Open("mssql", connStr)
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "postgres" ]]
	    connStr := fmt.Sprintf("user=%s password=%s host=%s port=%s dbname=%s sslmode=disable",
	                            user,pw,server,port,db)
        db, err = sql.Open("postgres", connStr)
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    db, err = sql.Open("sqlite3", host)
	[[ end ]]
    if err != nil {
        log.Fatalln("Error: Cannot connect: ", err)
    }
    err = db.Ping()
    if err != nil {
        log.Fatalln("Error: Cannot connect: ", err)
    }
}

func ioDisconnect() {
	[[ if eq .TD.Data.SqlType "mariadb" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "mssql" ]]
	    connStr := fmt.Sprintf("sqlserver://%s:%s@%s:%s?database=%s&connection+timeout=30",
	                            user,pw,server,port,db)
	    db, err := sql.Open("mssql", connStr)
	[[ else if eq .TD.Data.SqlType "mysql" ]]
		ERROR - NOT IMPLEMENTED
	[[ else if eq .TD.Data.SqlType "postgres" ]]
	    connStr := fmt.Sprintf("user=%s password=%s host=%s port=%s dbname=%s sslmode=disable",
	                            user,pw,server,port,db)
        db, err = sql.Open("postgres", connStr)
	[[ else if eq .TD.Data.SqlType "sqlite" ]]
	    db, err = sql.Open("sqlite3", host)
	[[ end ]]
    if err != nil {
        log.Fatalln("Error: Cannot connect: ", err)
    }
    err = db.Ping()
    if err != nil {
        log.Fatalln("Error: Cannot connect: ", err)
    }
}

