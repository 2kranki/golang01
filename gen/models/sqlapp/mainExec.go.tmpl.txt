// vi:nu:et:sts=4 ts=4 sw=4
// See License.txt in main repository directory

// SQL Application main program

// Generated: [[Time]]

package main

import (
    "fmt"
    "log"
	"net/http"
	"./handlers"
)

func HndlrFavIcon(w http.ResponseWriter, req *http.Request) {
    if req.Method != "GET" {
	    http.NotFound(w, req)
	}
    http.Error(w, http.StatusText(405), http.StatusMethodNotAllowed)
}

func HndlrHome(w http.ResponseWriter, req *http.Request) {
    if req.URL.Path != "/" {
        http.NotFound(w, req)
        return
    }

    w.Write([]byte("Set up main menu here..."))
}

func exec() {

	http.HandleFunc("/", mainIndex)
	http.HandleFunc("/favicon.ico", HndlrFavIcon)
	[[ range $t := .Data.Tables -]]
	    http.HandleFunc("/[[$t.Name]]",                   handlers.[[$t.Name]]HndlrIndex)
	    http.HandleFunc("/[[$t.Name]]/show",              handlers.[[$t.Name]]HndlrShow)
	    http.HandleFunc("/[[$t.Name]]/create",            handlers.[[$t.Name]]HndlrCreate)
	    http.HandleFunc("/[[$t.Name]]/create/process",    handlers.[[$t.Name]]HndlrCreateProcess)
	    http.HandleFunc("/[[$t.Name]]/update",            handlers.[[$t.Name]]HndlrUpdate)
	    http.HandleFunc("/[[$t.Name]]/update/process",    handlers.[[$t.Name]]HndlrUpdateProcess)
	    http.HandleFunc("/[[$t.Name]]/delete/process",    handlers.[[$t.Name]]HndlrDeleteProcess)
	[[ end -]]
	srvrStr := fmt.Sprintf("%s:%s", http_srvr, http_port)
	log.Fatal(http.ListenAndServe(srvrStr, nil))

}


func mainIndex(w http.ResponseWriter, req *http.Request) {
	//http.Redirect(w, req, "/$v.Name", http.StatusSeeOther)
}

// Tell Client that we don't have the requested file
func noFile(w http.ResponseWriter, req *http.Request) {
	http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
}